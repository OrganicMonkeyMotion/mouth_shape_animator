import bpy
import os
import json


bl_info = {
    "name": "Mouth Shape Animator",
    "blender": (3, 3, 0),  # Ensure compatibility with your Blender version
    "category": "Animation",  # Category under which it will be listed in Blender
    "author": "OrganicMonkeyMotion",  # Your name
    "version": (0, 1, 0),  # Version number
    "description": "Import and animate mouth shapes from JSON as generated by RLPS.",  # Short description
    "support": "COMMUNITY",
    "tracker_url": "https://github.com/OrganicMonkeyMotion/mouth_shape_animator/issues",
}


# --- HELPER FUNCTIONS ---

def import_mouth_shapes(json_file, image_folder):
     
    # Load the JSON data

    with open(json_file, 'r') as file:
        
        try:
            data = json.load(file)
            mouth_cues = data.get("mouthCues", [])
        except Exception as e:
            self.report({'ERROR'}, f"Error loading JSON: {str(e)}")
            return {'CANCELLED'}

    # Ensure a container for the image planes exists
    if "Mouth_Shapes" not in bpy.data.collections:
        mouth_shapes_container = bpy.data.collections.new("Mouth_Shapes")
        bpy.context.scene.collection.children.link(mouth_shapes_container)

    # Create a dictionary to hold the image planes for reuse
    image_planes = {}

    # Parse each mouth cue and set the visibility
    for cue in data['mouthCues']:
        value = cue['value']
        start_time = float(cue['start'])
        end_time = float(cue['end'])

        # Create image plane for this value if it doesn't exist
        if value not in image_planes:
            image_path = os.path.join(os.path.join(bpy.path.abspath("//"),image_folder, f"{value}.png"))
            if os.path.exists(image_path):
                # Create the image plane object
                img = bpy.data.images.load(image_path)
                bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))
                plane_obj = bpy.context.object
                plane_obj.name = value
                # Apply the material with the image texture
                mat = bpy.data.materials.new(name=f"Material_{value}")
                mat.use_nodes = True
                bsdf = mat.node_tree.nodes["Principled BSDF"]
                tex_image = mat.node_tree.nodes.new("ShaderNodeTexImage")
                tex_image.image = img
                mat.node_tree.links.new(bsdf.inputs['Base Color'], tex_image.outputs['Color'])
                mat.node_tree.links.new(bsdf.inputs['Alpha'], tex_image.outputs['Alpha'])
                
                plane_obj.data.materials.append(mat)
                
                # Add the plane to the "mouth_shapes" container
                mouth_shapes_container.objects.link(plane_obj)

                # Remove the plane from the main collection if it exists
                if plane_obj.name in bpy.context.scene.collection.objects:
                    bpy.context.scene.collection.objects.unlink(plane_obj)

                # Store it in the image_planes dictionary for reuse
                image_planes[value] = plane_obj
            else:
                print(f"Image file for {value} not found: {image_path}")

        # Set keyframes for visibility
        plane_obj = image_planes[value]

        # Set visibility to hidden initially (before start time)
        plane_obj.hide_viewport = True
        plane_obj.hide_render = True  # Hide from renders as well
        
        plane_obj.keyframe_insert(data_path="hide_viewport", frame=0)  # Hide initially
        plane_obj.keyframe_insert(data_path="hide_render", frame=0)

        # Set visibility at start_time
        plane_obj.hide_viewport = False
        plane_obj.hide_render = False  # Ensure it's visible in renders too
        plane_obj.keyframe_insert(data_path="hide_viewport", frame=start_time * 24)  # Show at start
        plane_obj.keyframe_insert(data_path="hide_render", frame=start_time * 24)

        # Set visibility at end_time
        plane_obj.hide_viewport = True
        plane_obj.hide_render = True  # Hide from renders as well
        plane_obj.keyframe_insert(data_path="hide_viewport", frame=end_time * 24)  # Hide at end
        plane_obj.keyframe_insert(data_path="hide_render", frame=end_time * 24)
        


# --- OPERATOR ---

def clear_mouth_shapes():
    if "Mouth_Shapes" in bpy.data.collections:
        mouth_shapes_container = bpy.data.collections["Mouth_Shapes"]

        # Remove all objects in the Mouth_Shapes collection
        for obj in list(mouth_shapes_container.objects):
            bpy.data.objects.remove(obj, do_unlink=True)

        # Unlink and remove the collection itself
        bpy.context.scene.collection.children.unlink(mouth_shapes_container)
        bpy.data.collections.remove(mouth_shapes_container)

class ImportMouthShapesOperator(bpy.types.Operator):
    bl_idname = "object.import_mouth_shapes"
    bl_label = "Import Mouth Shapes"
    
    def execute(self, context):
        # Get paths from the scene properties
        json_file =  context.scene.RLPS_json_file
        image_folder =  context.scene.RLPS_image_folder
        
        # Convert relative paths to absolute
        json_file = bpy.path.abspath(json_file)
        image_folder = bpy.path.abspath(image_folder)
        
        # Check if paths are set
        if not json_file or not image_folder:
            self.report({'ERROR'}, "Paths for JSON and image folder not set.")
            return {'CANCELLED'}

        # Clear existing objects in the scene
        clear_mouth_shapes()

        # Scan the image folder and create planes
        
        import_mouth_shapes(json_file, image_folder)
    
        
        self.report({'INFO'}, "Mouth Shapes Imported and Animated.")
        return {'FINISHED'}

# --- PANEL ---

class RLPSPanel(bpy.types.Panel):
    bl_label = "RLPS: Mouth Shapes"
    bl_idname = "OBJECT_PT_rlps_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "RLPS"
    
    def draw(self, context):
        layout = self.layout

        # Filepath settings
        layout.label(text="Select JSON File:")
        layout.prop(context.scene, "RLPS_json_file")
        
        layout.label(text="Select Image Folder:")
        layout.prop(context.scene, "RLPS_image_folder")
        
        layout.operator("object.import_mouth_shapes", text="Import Mouth Shapes")

# --- REGISTER / UNREGISTER ---

def register():
    bpy.utils.register_class(ImportMouthShapesOperator)
    bpy.utils.register_class(RLPSPanel)
    bpy.types.Scene.RLPS_json_file = bpy.props.StringProperty(
        name="JSON File", 
        description="Path to the JSON file",
        subtype='FILE_PATH',
        default=""
    )
    bpy.types.Scene.RLPS_image_folder = bpy.props.StringProperty(
        name="Image Folder", 
        description="Folder containing the mouth shapes",
        subtype='DIR_PATH',
        default=""
    )

def unregister():
    bpy.utils.unregister_class(ImportMouthShapesOperator)
    bpy.utils.unregister_class(RLPSPanel)
    del bpy.types.Scene.RLPS_json_file
    del bpy.types.Scene.RLPS_image_folder

if __name__ == "__main__":
    register()
